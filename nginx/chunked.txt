nginx中chunked编码的问题
nginx中默认是开启chunked编码的

首先说一下keepalive的意义
keepalive用来通知server和client, 此次发起的tcp链接可以复用. 
而使用重用的链接, 客户端必须要知道数据结束的位置, 才能判断这条链接是否已经空闲. 
http1.0 开始使用content-length头来定义response body的长度, 客户端通过这个长度来判断数据是否已经发送完整.
同时讲一下pipelining技术
pipelining是HTTP/1.1协议中的一个技术，能让多个HTTP请求同时通过一个socket传输.
注意它和keepalive的区别，keepalive能在一个socket中传输多个HTTP，但这些HTTP请求都是串行的，而pipelining则是并行的
可惜目前绝大部分浏览器在默认情况下都不支持，已知目前只有opera是默认支持的，
加上很多网络代理对其支持不好导致容易出现各种问题，所以并没有广泛应用

content-length 的作用和局限性
对于静态资源, content-length可以由应用或者server计算得出, 但是对于动态的资源, 有可能无预先得知content-length. 
这时候http1.0会主动关闭keep-alive, 输出一个connection: close通知客户端此链接关闭, 因为不需要重用链接, 客户端只要将剩余数据接受后组装在一起即可认为是完整数据,不需要content-length.
如果要输出content-length那么server就必须获得完整的response来计算length,当数据量大的时候,速度就成了瓶颈. 
更好的解决方案是分段传输. 先将一部分输出到客户端展示, 以加快客户端展示的速度.
上述的content-length都是response输出的. 值得注意的是, content-length并不是response的专用头, request也可以带上此头, 比如文件上传的时候, 或者使用PUT.

注: 如果开启了Content-Encoding,那么content-length就是Content-Encoding之后的结果,道理同上.

http1.1的解决方案

http1.1 增加了tranfer-encoding来解决这个问题, 目前的encoding方式只有chunked, 即分段传输编码。
每一段开始之前输出这一段的长度, 然后是\r\n,再然后是具体的数据, 以\r\n结束.
长度本身和两个\r\n不计入数据长度. 最后一个chunk必须输出长度为0来告诉客户端chunked结束.
server将无法获知content-length的数据逐段按此格式输出, 客户端通过长度获取每个chunk的数据,一直到长度为0的数据, 即为接受完毕.
chunked 要求在一条tpc链路上多次发送数据包, 所以必须开启keep-alive 来复用链路. 如果不开启, 则chunked也不会被支持.
不仅仅是response可以用chunked, request也可以使用chunked. 但浏览器支持情况并不统一(此处需要细节数据)

chunked和gzip的关系
zip是content-encoding, 即内容编码, chunked 是transfer-encoding,即传输编码, transfer-encoding 是对content-encoding的结果再做一次encoding, 
对于客户端来说, 需要先解码transfer-encoding, 再解码 content-encoding.
当使用chunked的时候, 可以对每个chunk先做gzip,再做chunked进行传输.
在nginx中,如果你配置了gzip,会发现所有gzip的文件都会使用chunked而不是content-length. 但是apache就不是这样.gzip同时也会输出content-length.
产生这个现象的原因是因为nginx的设计方式

在http1.1中,后端脚本动态输出的内容都会使用chunked.
你可以强制nginx不输出chunk. 但nginx也不会输出content-length的. 而且输出 connection: close.
