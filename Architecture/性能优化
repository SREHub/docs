网站的高性能架构
1.web前端性能优化
  浏览器访问优化
    减少http请求
    使用浏览器缓存
    启用压缩
    减少cookie传输
    界面渲染
  使用CDN
    一般缓存静态资源，放在离用户近的服务器上。
  反向代理
    安全
    缓存，负载均衡
2.应用服务器性能优化
网站性能优化第一定律：优先考虑使用缓存优化性能
缓存的本质是一个内存hash表。
  合理使用缓存
     频繁修改的数据、没有热点的访问、数据不一致与脏读(应用是否能容忍)、缓存可用性、缓存预热、缓存穿透、缓存雪崩。
  分布式缓存架构
    JBoss Cache:需要更新同步的分布式缓存
     在集群中所有服务器中保存相同的缓存数据，更新需要所有服务器同步。常用于企业及应用，大型网站不常用。
    MemCached:不互相通信的分布式缓存
     缓存与应用分离，集中式的缓存集群，缓存服务器之间不通信。
     应用程序通过一致性hash等路由算法选择缓存服务器远程访问缓存数据。
  异步操作
     通过消息队列进行异步的处理。任何可以晚点做的事情都应该晚点做。
  集群
     负载均衡，分摊压力。
  代码优化
     多线程
       线程安全
     资源复用
       单例（贫血模式）
       对象池（线程池，连接池）
     数据结构
     垃圾回收
3.存储性能优化
   ssd
   raid
   hdfs
   cefh
   
网站高可用架构
   负载均衡
   应用服务器集群的session管理
     1.session复制，服务器之间同步session信息。(适合小型服务)
     2.session绑定，hash算法。（服务器故障，session丢失，无法高可用）
     3.利用cookie记录session。（可能会受cookie大小限制）
     4.session服务器（终极方案，session与应用服务器分离）
高可用服务
   分级管理
   超时设置(应用层面)
   异步调用
   服务降级
     拒绝服务：拒绝低优先级应用的调用或者随机拒绝部分请求。
     关闭功能：关闭非核心功能，保障核心功能正常运行。
   幂等性设计
     重复调用和调用一次的结果是一样的。（有些请求天然幂等，有些则需要借助版本号，编号等进行控制）
  高可用的数据
    CAP原则，一般分布式系统会重视AP而牺牲一部分的C。
    数据备份：冷备，异步热备，同步热备。
    失效转移
      失效确认(心跳检测，错误报告)
      请求转移(重新路由到对等服务器上)
      数据恢复(保障数据的副本数)
  高可用网站的软件质量保证
    自动化测试
    预发布验证(环境和正式环境一致，但是没有流量)
    代码控制（版本管理svn/git）
    灰度发布
  网站运行监控
    监控数据采集
      用户行为日志收集
        1.服务器端日志收集
        2.浏览器客户端日志收集(嵌入专门的js脚本进行日志收集)
        使用storm进行日志的实时统计和分析
      服务器性能数据收集
        内存，负载，磁盘，IO等
      运行数据报告
    监控管理
      系统报警
      失效转移
      自动优雅降级（柔性）
  
  网站伸缩性设计  
    网站架构的伸缩设计
       不同功能进行物理分离
       单一功能通过集群进行伸缩
    应用服务器集群的伸缩设计
       负载均衡
    分布式缓存集群的伸缩设计
      memcached
      一致性hash + 虚拟节点(hash key->虚拟节点->物理节点)
    数据存储集群的伸缩设计
      关系型数据库
        主从同步，读写分离
        分库和分片
          支持数据分片的分布式数据库产品
           Amoeba(变形虫)和Cobar(阿里mysql分布式中间件，Amoeba的升级版)
            应用程序->Cobar->Mysql数据库
            Cobar：SQL解析->路由->执行->合并
              利用mysql的数据同步功能进行数据迁移(schema)
       Nosql数据库
网站的可扩展架构
 降低系统的耦合性
   基于事件驱动的架构
   分布式消息队列
 利用分布式服务构造可复用的业务平台

网站的安全架构

分布式存储系统高可用架构设计
   双写单读
   瞬时故障：重试+失效仲裁
   临时故障：借用临时服务器存储故障期间数据，等故障机器恢复后，同步故障期间数据。
   永久性故障：节点剔除，更换新的节点，全量同步数据。
 
 秒杀系统架构设计
   1.系统独立部署
   2.商品页面静态化
   3.租借秒杀活动网络带宽
   4.动态生成随机下单页面URl
   
   
   
    
    
     
  
